<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Petrie's Nest</title>
 <link href="http://username.github.com/atom.xml" rel="self"/>
 <link href="http://username.github.com"/>
 <updated>2012-10-05T12:02:34+08:00</updated>
 <id>http://username.github.com</id>
 <author>
   <name>Petrie</name>
   <email>lpfvip2008@gmail.com</email>
 </author>

 
 <entry>
   <title>Nginx 启动选项</title>
   <link href="http://username.github.com/Nginx/2012/09/29/nginx-options"/>
   <updated>2012-09-29T00:00:00+08:00</updated>
   <id>http://username.github.com/Nginx/2012/09/29/nginx-options</id>
   <content type="html">&lt;h2 id='nginx_'&gt;Nginx 命令行参数和信号&lt;/h2&gt;

&lt;h6 id='id11'&gt;选项&lt;/h6&gt;

&lt;blockquote&gt;
&lt;p&gt;-c &amp;lt;/path/to/config&amp;gt; 为nginx指定一个配置文件，来代替缺省的&lt;br /&gt;-t 不运行，而仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。&lt;br /&gt;-v 显示nginx 的版本&lt;br /&gt;-V 显示nginx 的版本，编译器版本和配置参数&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>SQLServer 便捷管理多个服务器</title>
   <link href="http://username.github.com/SQL Server/2012/09/27/sqlserver-sql-manager"/>
   <updated>2012-09-27T00:00:00+08:00</updated>
   <id>http://username.github.com/SQL Server/2012/09/27/sqlserver-sql-manager</id>
   <content type="html">&lt;hr /&gt;
&lt;h2 id='_out2005'&gt;哇 你好out，还在用2005.&lt;/h2&gt;

&lt;p&gt;发现自己博客有个特点（这才谢了几篇，就总结出特点了），就是没篇要介绍的东西都很少，一个命令、一个技巧，但我通常都能罗出一大堆。这不，今天又是这个节奏。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='id9'&gt;从我的优点说起&lt;/h2&gt;

&lt;p&gt;我的有点是什么呢？ 被某个东西折磨久了，就会主动去找一个便捷的代替方式。这次就是，SQL Server应该很多人都用过吧！好了不废话了，其实我要介绍两个东西。&lt;br /&gt; 1.“SQL Server 解决方案资源管理器” &lt;br /&gt; 2.SQL Server 下连接访问远程数据库&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='1sql_server_'&gt;1.SQL Server 解决方案资源管理器&lt;/h2&gt;

&lt;p&gt;这个很简单，就是一个SQL Server的子窗口，只不过不常用SQL Server的人很难发现，工作原因我用的较多，就发现了。依次“视图”-&amp;gt;“解决方案资源管理器”就出来了，就是这个窗口，你可以将相关的服务器和SQL文件保存在同一个解决方案里，这样找的时候十分的方便。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='2sql_server_'&gt;2.SQL Server 下连接访问远程数据库&lt;/h2&gt;

&lt;p&gt;简单来说其实就几条SQL语句。&lt;br /&gt;&lt;code&gt;exec sp_addlinkedserver &amp;#39;myserver&amp;#39;,&amp;#39;&amp;#39;,&amp;#39;SQLOLEDB &amp;#39;,&amp;#39;远程服务器名或ip地址&amp;#39;&lt;/code&gt; &lt;code&gt;exec sp_addlinkedsrvlogin &amp;#39;myserver&amp;#39;,&amp;#39;false&amp;#39;,null,&amp;#39;username&amp;#39;,&amp;#39;password&amp;#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;有了上面两句就可以直接远程操作数据库了：&lt;br /&gt;&lt;code&gt;select * from myserver.database.dbo.table;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;就这样吧!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='id10'&gt;拾遗&lt;/h2&gt;

&lt;p&gt;&lt;a href='http://www.cnblogs.com/OpenCoder/archive/2010/03/18/1689321.html' title='参考文章'&gt;参考文章&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>vim 宏</title>
   <link href="http://username.github.com/vim/2012/09/26/vim-define"/>
   <updated>2012-09-26T00:00:00+08:00</updated>
   <id>http://username.github.com/vim/2012/09/26/vim-define</id>
   <content type="html">&lt;h2 id='id6'&gt;&lt;strong&gt;扯淡&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;用过Markdown的同学都应该知道，其换行语法为在行尾加两个空格。&lt;br /&gt;今天在用Markdown写东西的时候，需要从txt文件中黏贴大量文本。如果我想让其正常的显示换行，就需要在每一行的末尾加上两个空格。一行行添加，太麻烦了，很自然的想到了vim。&lt;br /&gt;利用vim中ctrl+v命令可以进行批量的修改。但是在操作的过程中我发现这个命令好像无法批量添加空格。没招了。&lt;br /&gt;下午的时候不忙，遂在群里提出了这个问题，力哥给了回复，利用vim的宏功能（&lt;a href='http://t.cn/hgD3v' title='教程'&gt;教程&lt;/a&gt;）。&lt;br /&gt;试了一下，果断实现了这个需求，简单实用很不错。下面简单介绍一下：&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='id7'&gt;&lt;strong&gt;正题&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;打开vim，输入一下内容：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;aaa&lt;br /&gt;bbb&lt;br /&gt;ccc&lt;br /&gt;ddd&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;录入宏：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按下esc进入“指令模式” 。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;按下q表示即将进入宏录入，之后按下任意a表示名字为‘a’的宏。 &lt;br /&gt;3.然后进行你想录入的操作，我这里是想在每行的末尾添加两个空格，所以我进行的操作是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A #在行尾插入&lt;br /&gt;space,space #两下空格，在行尾插入两行空格&lt;br /&gt;esc #进入“指令模式”&lt;br /&gt;j #光标移至下一行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;完成，最后重要的一步，退出宏录制，很简单，键入q。&lt;br /&gt;到此，我需要录制的宏已经完成，接下来只需要重复执行这个宏就能实现我的需求。&lt;br /&gt;我这里需要执行4次，我只要输入4@a，便可将名为2的宏执行4次。其中@之前是次数，@之后是宏的名字。 是不是很简单。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='id8'&gt;&lt;strong&gt;拾遗&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href='http://t.cn/hgD3v' title='普通人的编辑利器——Vim'&gt;普通人的编辑利器——Vim&lt;/a&gt;&lt;br /&gt;&lt;a href='http://blog.19lou.com/10061845/viewspace-378958' title='Vim的三种模式'&gt;Vim的三种模式&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>易忘vim命令2</title>
   <link href="http://username.github.com/vim/2012/09/19/useful-vim-2"/>
   <updated>2012-09-19T00:00:00+08:00</updated>
   <id>http://username.github.com/vim/2012/09/19/useful-vim-2</id>
   <content type="html">&lt;h1 id='begin'&gt;BEGIN&lt;/h1&gt;

&lt;p&gt;ZZ：这是大写的Z，若档案没有改动，则不储存离开，若档案已经被更动过，则存储后离开！&lt;br /&gt;：w &lt;span&gt;filename&lt;/span&gt; 将编辑的数据储存成另一个档案&lt;br /&gt;：r &lt;span&gt;filename&lt;/span&gt; 在编辑数据中，读入另一个档案的数据。&lt;br /&gt;：n1，n2 w &lt;span&gt;filename&lt;/span&gt; 将n1到n2的内容储存成filename这个档案&lt;br /&gt;：!command 暂时离开vi到指令模式下执行command的显示结果！例如&lt;span&gt;:!ls /home&lt;/span&gt;即可在vi当中查看/home底下以ls输出的档案信息。&lt;/p&gt;

&lt;h1 id='vim'&gt;VIM的额外功能&lt;/h1&gt;

&lt;h2 id='id3'&gt;区块选择&lt;/h2&gt;

&lt;p&gt;v：字符选择，会将光标经过的地方反白选择！&lt;br /&gt;V：行选择，会将光标经过的行反白选择！&lt;br /&gt;Ctrl+v：区块选择，可用长方形的方式选择资料&lt;br /&gt;y： 将反白的地方复制起来&lt;br /&gt;d： 将反白的地方删除掉&lt;/p&gt;

&lt;h2 id='id4'&gt;多档案编辑&lt;/h2&gt;

&lt;p&gt;：n 编辑下一个档案 &lt;br /&gt;：N 编辑上一个档案&lt;br /&gt;：files 列出目前这个vim开启的所有档案&lt;/p&gt;

&lt;h2 id='id5'&gt;多窗口功能&lt;/h2&gt;

&lt;p&gt;：sp /etc/hosts 在分割窗口中打开新文件&lt;br /&gt;ctrl+w+↑/j及ctrl+w+↓/j 在窗口之间移动：按键的按法是：先按下ctrl不放，再按下w后放开所有的按键，然后在按下j或向下箭头，则光标可移动到下方的窗口。 &lt;br /&gt;ctrl+w+q：关闭下方的窗口&lt;/p&gt;

&lt;h2 id='vimvimrcviminfo'&gt;vim环境设定与记录：~/.vimrc,~/viminfo&lt;/h2&gt;

&lt;p&gt;：set hlsearch ：set nohlseach 设置搜索反白 ：set autoindent ：set noautoindent 是否自动缩排 ：set backup 是否自动储存备份档 ：set all 显示目前所有环境参数设定值。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>易忘vim命令1</title>
   <link href="http://username.github.com/vim/2012/09/19/useful-vim-1"/>
   <updated>2012-09-19T00:00:00+08:00</updated>
   <id>http://username.github.com/vim/2012/09/19/useful-vim-1</id>
   <content type="html">&lt;p&gt;n+空格键 ： 那个n表示【数字】，例如20。按下数字后在按空格键盘，光标会向有一栋这一行的n个字符。例如20+空格 则光标会向后面移动20个字符距离。&lt;br /&gt;0：移动到这一行的最前面字符处&lt;br /&gt;$：移动到这一行的最后面字符处&lt;br /&gt;&lt;strong&gt;H：光标移动到这个屏幕最上方那一行的第一个字符 &lt;br /&gt;M：光标移动到这个屏幕的中央那一行的第一个字符 &lt;br /&gt;L：光标移动到这个屏幕的最下方那一行的第一个字符&lt;/strong&gt;&lt;br /&gt;G：移动到这个文档的最后一行。&lt;br /&gt;n+回车键 ：n为数字。光标向下移动n行(常用) &lt;br /&gt;？word：向光标之上寻找一个字符串名称为word的字符串。&lt;br /&gt;：n1,n2s/word1/word2/g：n1与n2为数字。在第n1与n2行之间寻找word1这个字符串，并将该字符串取代为word2！举例来说，在100到200行之间搜索vbird并取代为VBIRD则：&lt;span&gt;:100,200s/vbrid/VBIRD/g&lt;/span&gt;&lt;br /&gt;1,$s/word1/word2/g：从第一行到最后一行寻找word1字符串，并替换&lt;br /&gt;1,$s/word1/word2/gc :需要确认的替换。 &lt;br /&gt;​&lt;h2&gt;删除、复制与黏贴&lt;/h2&gt; nx：n为数字，连续向后删除n个字符。举例来说，我要连续删除10个字符【10x】。 &lt;br /&gt;ndd：n为数字。删除光标所在的向下n列，例如20dd则是删除20列。&lt;br /&gt;d1G：删除光标所在到第一行的所有数据。&lt;br /&gt;dG：删除光标所在到最后一行的数据 &lt;br /&gt;d$：删除游标所在处，到该行的最后一个字符&lt;br /&gt;d0：删除游标所在处到行首的字符&lt;br /&gt;nyy，y1G，yG，y0，y$参考上文。&lt;br /&gt;p,P：p为将已复制的数据在光标下一行贴上，P则为贴在游标上一行！&lt;br /&gt;J：将光标所在列与下一列的数据结合成同一列。 &lt;br /&gt;&lt;strong&gt;c：重复删除多个数据，例如向下删除10行【10cj】&lt;/strong&gt;&lt;br /&gt;u：重复前一个动作。（&lt;strong&gt;常用&lt;/strong&gt;） &lt;br /&gt;Ctrl+r：重做上一个动作。（&lt;strong&gt;常用&lt;/strong&gt;）&lt;br /&gt;.：重复前一个动作，如果你想要重复删除，重复贴上等等动作。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>利用CentOS.ISO配置本地yum源</title>
   <link href="http://username.github.com/linux/2012/09/18/linux-yum-iso"/>
   <updated>2012-09-18T00:00:00+08:00</updated>
   <id>http://username.github.com/linux/2012/09/18/linux-yum-iso</id>
   <content type="html">&lt;h1 id='id1'&gt;扯淡&lt;/h1&gt;

&lt;p&gt;公司的网络要用代理，许多非常cool的东西都玩不了，真垃圾。&lt;br /&gt;组长让搞一个LNMP的教程。&lt;br /&gt;上次在开发机上乱搞，把LNMP搞乱了，程序不能运行，调了好久，最后只好请来别的组的一位大神才解决。谁让自己是LNMP菜鸟呢!组里也都是做.Net的&lt;br /&gt;从此我就不敢再在开发机上乱弄了。 （这事才几天，缓缓再说）。&lt;/p&gt;

&lt;p&gt;开发联网上网不用通过代理，用起来爽啊，装点啥直接yum。&lt;/p&gt;

&lt;p&gt;这几天还得把LNMP教程弄出来。&lt;/p&gt;

&lt;p&gt;用不了开发机，只能在本机折腾了，先装mysql，源码安装要用到cmake，不能用yum（不能上网），自己找依赖吧。&lt;/p&gt;

&lt;p&gt;本想依赖最多有1，2层吧，可是事实不是这样，各种深度，各种广度啊。果断改变策略。想起以前在uplooking学Linux的时候老师曾教过本地yum配置。所幸试一试。&lt;/p&gt;

&lt;p&gt;废话了这么多终于要进入正题了&amp;#8230;&lt;/p&gt;

&lt;h1 id='id2'&gt;正题&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;.将下好的dvdiso复制到虚拟机的 /home/petrie/ 下并重命名为centos.iso。此时iso的目录为/home/petrie/centos.iso&lt;br /&gt;&lt;strong&gt;2&lt;/strong&gt;.将dvdiso文件绑定到目录/mnt/centos_iso&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;mkdir /mnt/centos_iso&lt;br /&gt;mount -o loop /home/petrie/centos.iso /mnt/centos_iso&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;好了，现在光盘中的rpm都可以用来安装了，但是这能安装那些没有依赖的，有依赖的要自行处理，接下来要安装的东西后面会用到，十分幸运，她没有依赖&lt;/em&gt;&lt;br /&gt;&lt;strong&gt;3&lt;/strong&gt;.安装配置软件&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cd /mnt/centos_iso/CentOS&lt;br /&gt;rpm -ivh createrepo-0.4.11-3.el5.noarch.rpm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;.运行createrepo&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cd /mnt&lt;br /&gt;createrepo &lt;strong&gt;./&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;这个过程挺长的2，3分钟吧&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;.修改配置&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cd /etc/yum.repos.d/&lt;br /&gt;vim dvdiso.repo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在dvdiso.repo中写入以下内容：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[DVDISO]&lt;br /&gt;name=DVD ISO&lt;br /&gt;baseurl=file:///mnt/ &lt;br /&gt;enabled=1&lt;br /&gt;gpgcheck=0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;注意：__步骤5 需要将/etc/yum.repos.d/下的文件清空，也就是说/etc/yum.repos.d/下只能有dvdiso.repo文件__&lt;/p&gt;

&lt;p&gt;这就好了，执行 yum clean all;yum list,执行成功则说明配置成功了。 赶紧装个软件试试吧~ pretty cool！ huh~&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Linux挂载ISO文件</title>
   <link href="http://username.github.com/linux/2012/09/18/linux-mount-iso"/>
   <updated>2012-09-18T00:00:00+08:00</updated>
   <id>http://username.github.com/linux/2012/09/18/linux-mount-iso</id>
   <content type="html">&lt;h2 id='linux_iso'&gt;linux 下绑定ISO文件&lt;/h2&gt;

&lt;p&gt;在/mnt下创建/mnt/centos_iso文件夹&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;mkdir /mnt/centos_iso&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;将/home/cksamba/share/下的centos.iso挂在到/mnt/centos_iso文件夹下&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;mount /home/cksamba/share/centos.iso \ /mnt/centos_iso -t iso9660 -o ro,loop=/dev/loop0&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 
</feed>